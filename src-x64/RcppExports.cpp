// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// approximate
SEXP approximate(NumericVector t_obs, SEXP matData, IntegerVector knotIndex, NumericVector knotDiff, LogicalVector continuous, double r);
RcppExport SEXP operatorCalc_approximate(SEXP t_obsSEXP, SEXP matDataSEXP, SEXP knotIndexSEXP, SEXP knotDiffSEXP, SEXP continuousSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type t_obs(t_obsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type matData(matDataSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type knotIndex(knotIndexSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type knotDiff(knotDiffSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type continuous(continuousSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    __result = Rcpp::wrap(approximate(t_obs, matData, knotIndex, knotDiff, continuous, r));
    return __result;
END_RCPP
}
// backward
SEXP backward(NumericVector diffs, NumericVector f, SEXP g);
RcppExport SEXP operatorCalc_backward(SEXP diffsSEXP, SEXP fSEXP, SEXP gSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type diffs(diffsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type f(fSEXP);
    Rcpp::traits::input_parameter< SEXP >::type g(gSEXP);
    __result = Rcpp::wrap(backward(diffs, f, g));
    return __result;
END_RCPP
}
// evaluate
SEXP evaluate(IntegerVector jj, NumericVector s, NumericVector f, SEXP g);
RcppExport SEXP operatorCalc_evaluate(SEXP jjSEXP, SEXP sSEXP, SEXP fSEXP, SEXP gSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< IntegerVector >::type jj(jjSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type s(sSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type f(fSEXP);
    Rcpp::traits::input_parameter< SEXP >::type g(gSEXP);
    __result = Rcpp::wrap(evaluate(jj, s, f, g));
    return __result;
END_RCPP
}
// forward
SEXP forward(NumericVector diffs, NumericVector f, SEXP g);
RcppExport SEXP operatorCalc_forward(SEXP diffsSEXP, SEXP fSEXP, SEXP gSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type diffs(diffsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type f(fSEXP);
    Rcpp::traits::input_parameter< SEXP >::type g(gSEXP);
    __result = Rcpp::wrap(forward(diffs, f, g));
    return __result;
END_RCPP
}
// integral
SEXP integral(NumericVector diffs, NumericVector f, SEXP g);
RcppExport SEXP operatorCalc_integral(SEXP diffsSEXP, SEXP fSEXP, SEXP gSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type diffs(diffsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type f(fSEXP);
    Rcpp::traits::input_parameter< SEXP >::type g(gSEXP);
    __result = Rcpp::wrap(integral(diffs, f, g));
    return __result;
END_RCPP
}
// inv_beta
SEXP inv_beta(NumericVector alpha_f, SEXP alpha_g, NumericVector beta_f, SEXP beta_g, NumericVector lambda, double order, double super, LogicalVector continuous);
RcppExport SEXP operatorCalc_inv_beta(SEXP alpha_fSEXP, SEXP alpha_gSEXP, SEXP beta_fSEXP, SEXP beta_gSEXP, SEXP lambdaSEXP, SEXP orderSEXP, SEXP superSEXP, SEXP continuousSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type alpha_f(alpha_fSEXP);
    Rcpp::traits::input_parameter< SEXP >::type alpha_g(alpha_gSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta_f(beta_fSEXP);
    Rcpp::traits::input_parameter< SEXP >::type beta_g(beta_gSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type order(orderSEXP);
    Rcpp::traits::input_parameter< double >::type super(superSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type continuous(continuousSEXP);
    __result = Rcpp::wrap(inv_beta(alpha_f, alpha_g, beta_f, beta_g, lambda, order, super, continuous));
    return __result;
END_RCPP
}
// inv_gamma
SEXP inv_gamma(NumericVector alpha_f, SEXP alpha_g, NumericVector gamma_f, SEXP gamma_g, NumericVector lambda, double order, double super, LogicalVector continuous);
RcppExport SEXP operatorCalc_inv_gamma(SEXP alpha_fSEXP, SEXP alpha_gSEXP, SEXP gamma_fSEXP, SEXP gamma_gSEXP, SEXP lambdaSEXP, SEXP orderSEXP, SEXP superSEXP, SEXP continuousSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type alpha_f(alpha_fSEXP);
    Rcpp::traits::input_parameter< SEXP >::type alpha_g(alpha_gSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type gamma_f(gamma_fSEXP);
    Rcpp::traits::input_parameter< SEXP >::type gamma_g(gamma_gSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type order(orderSEXP);
    Rcpp::traits::input_parameter< double >::type super(superSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type continuous(continuousSEXP);
    __result = Rcpp::wrap(inv_gamma(alpha_f, alpha_g, gamma_f, gamma_g, lambda, order, super, continuous));
    return __result;
END_RCPP
}
// inverse
SEXP inverse(NumericVector f, SEXP g, double order, double super, LogicalVector continuous);
RcppExport SEXP operatorCalc_inverse(SEXP fSEXP, SEXP gSEXP, SEXP orderSEXP, SEXP superSEXP, SEXP continuousSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type f(fSEXP);
    Rcpp::traits::input_parameter< SEXP >::type g(gSEXP);
    Rcpp::traits::input_parameter< double >::type order(orderSEXP);
    Rcpp::traits::input_parameter< double >::type super(superSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type continuous(continuousSEXP);
    __result = Rcpp::wrap(inverse(f, g, order, super, continuous));
    return __result;
END_RCPP
}
// multFct
SEXP multFct(NumericVector f1, SEXP g1, NumericVector f2, SEXP g2);
RcppExport SEXP operatorCalc_multFct(SEXP f1SEXP, SEXP g1SEXP, SEXP f2SEXP, SEXP g2SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type f1(f1SEXP);
    Rcpp::traits::input_parameter< SEXP >::type g1(g1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type f2(f2SEXP);
    Rcpp::traits::input_parameter< SEXP >::type g2(g2SEXP);
    __result = Rcpp::wrap(multFct(f1, g1, f2, g2));
    return __result;
END_RCPP
}
// multFct_left
SEXP multFct_left(SEXP x, NumericVector f, SEXP g);
RcppExport SEXP operatorCalc_multFct_left(SEXP xSEXP, SEXP fSEXP, SEXP gSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type f(fSEXP);
    Rcpp::traits::input_parameter< SEXP >::type g(gSEXP);
    __result = Rcpp::wrap(multFct_left(x, f, g));
    return __result;
END_RCPP
}
// multFct_right
SEXP multFct_right(NumericVector f, SEXP g, SEXP y);
RcppExport SEXP operatorCalc_multFct_right(SEXP fSEXP, SEXP gSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type f(fSEXP);
    Rcpp::traits::input_parameter< SEXP >::type g(gSEXP);
    Rcpp::traits::input_parameter< SEXP >::type y(ySEXP);
    __result = Rcpp::wrap(multFct_right(f, g, y));
    return __result;
END_RCPP
}
// solveFct
SEXP solveFct(NumericVector f1, SEXP g1, NumericVector f2, SEXP g2, double order, double super, LogicalVector continuous);
RcppExport SEXP operatorCalc_solveFct(SEXP f1SEXP, SEXP g1SEXP, SEXP f2SEXP, SEXP g2SEXP, SEXP orderSEXP, SEXP superSEXP, SEXP continuousSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type f1(f1SEXP);
    Rcpp::traits::input_parameter< SEXP >::type g1(g1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type f2(f2SEXP);
    Rcpp::traits::input_parameter< SEXP >::type g2(g2SEXP);
    Rcpp::traits::input_parameter< double >::type order(orderSEXP);
    Rcpp::traits::input_parameter< double >::type super(superSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type continuous(continuousSEXP);
    __result = Rcpp::wrap(solveFct(f1, g1, f2, g2, order, super, continuous));
    return __result;
END_RCPP
}
// superSample
SEXP superSample(SEXP choose, IntegerVector jj, NumericVector a, NumericVector b, NumericVector f, SEXP g);
RcppExport SEXP operatorCalc_superSample(SEXP chooseSEXP, SEXP jjSEXP, SEXP aSEXP, SEXP bSEXP, SEXP fSEXP, SEXP gSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type choose(chooseSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type jj(jjSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type f(fSEXP);
    Rcpp::traits::input_parameter< SEXP >::type g(gSEXP);
    __result = Rcpp::wrap(superSample(choose, jj, a, b, f, g));
    return __result;
END_RCPP
}
// triangular
SEXP triangular(NumericVector diffs, NumericVector f, SEXP g);
RcppExport SEXP operatorCalc_triangular(SEXP diffsSEXP, SEXP fSEXP, SEXP gSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type diffs(diffsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type f(fSEXP);
    Rcpp::traits::input_parameter< SEXP >::type g(gSEXP);
    __result = Rcpp::wrap(triangular(diffs, f, g));
    return __result;
END_RCPP
}
