{
    "contents" : "dE.symm.id <- function(S) {\n  # S: list: alpha1, delta1, epsilon1, alpha2, delta2, epsilon2, delta12, epsilon12\n\n  # compute representation of S1*S2\n  alpha12 <- S$alpha1*S$alpha2; alpha12@f <- alpha12@f - c(diag(dim(alpha12@f)[1]))\n  delta12 <- inverse(S$alpha2,S$delta2) + S$epsilon1*forward(transpose(S$delta1)*S$delta2) -\n    S$delta1*forward(transpose(S$epsilon1)*S$delta2)\n  epsilon12 <- transpose(S$alpha2)*S$epsilon1 + S$delta2*backward(transpose(S$epsilon2)*S$epsilon1) + \n    S$epsilon2*forward(transpose(S$delta2)*S$epsilon1)\n\n  # derivative wrt alpha1\n  Dalpha1 <- alpha12*transpose(S$alpha2) +\n    (delta12-S$delta12)*transpose(S$delta2)\n  \n  # derivative wrt delta1\n  Ddelta1 <- S$delta1*backward(transpose(S$epsilon12)*S$epsilon12) + \n    S$delta12*backward(transpose(S$epsilon2)*S$epsilon12) +\n    S$delta2*backward(transpose(delta12-S$delta12)*S$epsilon1) -\n    (delta12-S$delta12)*forward(transpose(S$delta2)*S$epsilon1)\n  \n  # derivative wrt epsilon1\n  Depsilon1 <- (delta12-S$delta12)*forward(transpose(S$delta2)*S$delta1) -\n    S$delta2*backward(transpose(delta12-S$delta12)*S$delta1) +\n    S$alpha2*(epsilon12-S$epsilon12) +\n    S$epsilon2*forward(transpose(S$delta2)*(epsilon12-S$epsilon12)) +\n    S$delta2*backward(transpose(S$epsilon2)*(epsilon12-S$epsilon12))\n  \n  # derivative wrt alpha2\n  Dalpha2 <- transpose(S$alpha1)*alpha12 +\n    S$epsilon1*(epsilon12-S$epsilon12)\n  \n  # derivative wrt delta2\n  Ddelta2 <- transpose(S$alpha1)*(delta12-S$delta12) +\n    S$delta1*backward(transpose(S$epsilon1)*(delta12-S$delta12)) -\n    S$epsilon1*backward(transpose(S$delta1)*(delta12-S$delta12)) +\n    (epsilon12-S$epsilon12)*backward(transpose(S$epsilon1)*S$epsilon2) +\n    S$epsilon1*backward(transpose(epsilon12-S$epsilon12)*S$epsilon2)\n  \n  # derivative wrt epsilon2\n  Depsilon2 <- S$epsilon12*forward(transpose(S$delta1)*S$delta12) +\n    S$epsilon2*forward(transpose(S$delta12)*S$delta12) + \n    S$epsilon1*forward(transpose(epsilon12-S$epsilon12)*S$delta2) +\n    S$delta1*backward(transpose(S$epsilon1)*(epsilon12-S$epsilon12))\n  \n  # derivative wrt delta12\n  Ddelta12 <- S$delta1*backward(transpose(S$epsilon12)*S$epsilon2) +\n    S$delta12*backward(transpose(S$epsilon2)*S$epsilon2) +\n    (S$delta12 - delta12)\n  \n  # derivative wrt epsilon12\n  Depsilon12 <- S$epsilon12*forward(transpose(S$delta1)*S$delta1) +\n    S$epsilon2*forward(transpose(S$delta12)*S$delta1) +\n    (S$epsilon12 - epsilon12)\n \n  # make results piecewise linear\n  #Dalpha1@g    <- array(0,dim=c(dim(Dalpha1@g)[1:3],0))\n  #Ddelta1@g    <- array(0,dim=c(dim(Ddelta1@g)[1:3],0))\n  #Depsilon1@g  <- array(0,dim=c(dim(Depsilon1@g)[1:3],0))\n  #Dalpha2@g    <- array(0,dim=c(dim(Dalpha2@g)[1:3],0))\n  #Ddelta2@g    <- array(0,dim=c(dim(Ddelta2@g)[1:3],0))\n  #Depsilon2@g  <- array(0,dim=c(dim(Depsilon2@g)[1:3],0))\n  #Ddelta12@g   <- array(0,dim=c(dim(Ddelta12@g)[1:3],0))\n  #Depsilon12@g <- array(0,dim=c(dim(Depsilon12@g)[1:3],0))\n  \n  # return result\n  return(list(alpha1=triangular(Dalpha1),delta1=triangular(Ddelta1),epsilon1=triangular(Depsilon1),\n              alpha2=triangular(Dalpha2),delta2=triangular(Ddelta2),epsilon2=triangular(Depsilon2),\n              delta12=triangular(Ddelta12),epsilon12=triangular(Depsilon12)))\n}\n",
    "created" : 1410505281015.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2874932828",
    "id" : "C255D8C",
    "lastKnownWriteTime" : 1410854578,
    "path" : "C:/Users/pdq668/Dropbox/Full-rank functional regression/operatorCalc/R/dE_symm_id.R",
    "project_path" : "R/dE_symm_id.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}