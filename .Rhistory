# matFct: product
x <- seq(-0.1,1.1,0.01)
matplot(x,t(matrix(evaluate(x,mF2*mF4),2,length(x))))
matlines(x,t(matrix(evaluate(x,mF2),2,length(x))))
matlines(x,t(matrix(evaluate(x,mF4),4,length(x))))
(mF2*mF4)@mesh
for (i in sort(sample(1:length(x),40))) {
cat("t=",x[i],":",evaluate(x,mF2)[,,i]%*%evaluate(x,mF4)[,,i]-evaluate(x,mF2*mF4)[,,i],"\n")
}
# speed
mF4 <- superSample(mF2@mesh,mF4)
mF2 <- superSample(mF4@mesh,mF2)
system.time(for (i in 1:1000) res1 <- mF2*mF4)
# matFct: forward
x <- seq(0,2,0.01)
mF <- matFct(mesh=mesh(c(0,1,2)),f=array(c(0,1,-2),dim=c(1,1,3)),g=array(rnorm(2),dim=c(1,1,2,1)),continuous=rep(FALSE,2))
plot(x,evaluate(x,mF))
plot(x,evaluate(x,forward(mF)))
plot(x,evaluate(x,forward(forward(mF))))
plot(x,evaluate(x,forward(forward(forward(mF)))))
library(operatorCalc)
(me <- mesh(seq(0,1,length.out=11)))
(mF  <- matFct(mesh=me,f=array(rbind(sin(3.1415*me),cos(3.1415*me)),dim=c(1,2,11)),g=array(0,dim=c(1,2,10,0)),continuous=rep(TRUE,10)))
(mF2 <- matFct(mesh=me,f=array(rbind(me,-me),dim=c(1,2,11)),g=array(0,dim=c(1,2,10,0)),continuous=rep(TRUE,10)))
plot(mF)
plot(mF+mF2)
plot((mF+mF2)-mF)
mF <- matFct(mesh=mesh(c(0,1,2)),f=array(c(0,1,-2),dim=c(1,1,3)),g=array(rnorm(2),dim=c(1,1,2,1)),continuous=rep(FALSE,2))
plot(mF)
plot(forward(mF))
plot(forward(forward(mF)))
plot(forward(forward(forward(mF))))
plot(mF,main="test")
mF <- matFct(mesh=mesh(c(0,1,2)),f=array(c(0,1,-2),dim=c(1,1,3)),g=array(rnorm(2),dim=c(1,1,2,1)),continuous=rep(FALSE,2))
plot(mF); title("Basic function")
plot(forward(mF)); title("Indeterminate integral")
plot(forward(forward(mF))); title("Second indeterminate integral")
plot(forward(forward(forward(mF)))); title("Third indeterminate integral")
mF
mF2
mF
mF2
mF|mF2
tmp <- apply(0.01*array(rnorm(4*101),dim=c(101,2,2)),c(2,3),cumsum)
plot(approximate(seq(0,1,0.01),tmp,seq(1,101,10),order=0))
plot(approximate(seq(0,1,0.01),tmp,seq(1,101,10),order=1))
plot(approximate(seq(0,1,0.01),tmp,seq(1,101,10),order=2))
tmp <- apply(0.01*array(rnorm(4*101),dim=c(101,2,2)),c(2,3),cumsum)
plot(approximate(seq(0,1,0.01),tmp,seq(1,101,10),order=0))
plot(approximate(seq(0,1,0.01),tmp,seq(1,101,10),order=1))
plot(approximate(seq(0,1,0.01),tmp,seq(1,101,10),order=2))
# -----------------------------------------------------
random.function <- function(a,b,p,r,N,M) {
pp <- 2*(r+1)*p
approximate(seq(a,b,length.out=pp+1),
array(apply(array(rnorm((pp+1)*N*M)/sqrt(pp),dim=c(pp+1,N,M)),2:3,cumsum),dim=c(pp+1,N,M)),
seq(1,pp+1,2*(r+1)),
r,TRUE)}
random.operator <- function(a,b,p,r,N,T.order,P.order) {
tmp <- random.function(a,b,p,r,N,N)
tmp <- tmp*transpose(tmp)
tmp@f <- tmp@f + 10*c(diag(N))
operator(alpha=tmp,
beta=random.function(a,b,p,r,N,T.order),
gamma=random.function(a,b,p,r,N,T.order),
delta=random.function(a,b,p,r,N,P.order),
epsilon=random.function(a,b,p,r,N,P.order))}
# ------------------------
# Check of the algebra
# ------------------------
a <- -1
b <- 2
p <- 20
r <- 2
N <- 2
fct <- random.function(a,b,p,r,N,3)
op1 <- random.operator(a,b,p,r,N,2,1)
op2 <- random.operator(a,b,p,r,N,2,3)
plot(op1*op2*fct)
x <- seq(0,1,0.01)
summary(evaluate(x,(op1*op2)*fct)-evaluate(x,op1*(op2*fct)))
summary(evaluate(x,(op1+op2)*fct)-evaluate(x,op1*fct+op2*fct))
system.time(tmp <- op1*inverse(op1))
plot(tmp@alpha)
plot(tmp@beta*transpose(tmp@gamma))
plot(tmp@delta*transpose(tmp@epsilon))
summary(evaluate(x,tmp*fct)-evaluate(x,fct))
library(operatorCalc)
library(operatorCalc)
# mesh class
showMethods(classes="mesh")
(me <- mesh(seq(0,1,length.out=11)))
# matFct class
showMethods(classes="matFct")
(mF  <- matFct(mesh=me,f=array(rbind(sin(3.1415*me),cos(3.1415*me)),dim=c(1,2,11)),g=array(0,dim=c(1,2,10,0)),continuous=rep(TRUE,10)))
(mF2 <- matFct(mesh=me,f=array(rbind(me,-me),dim=c(1,2,11)),g=array(0,dim=c(1,2,10,0)),continuous=rep(TRUE,10)))
plot(mF)
plot(mF+mF2)
plot((mF+mF2)-mF)
# matFct: superSample
(mF3 <- matFct(mesh=mesh(c(0,1)),f=array(1:4,dim=c(2,2,2)),g=array(1:8,dim=c(2,2,1,2)),continuous=FALSE))
x <- seq(0.1,0.9,0.01)
matplot(x,t(matrix(evaluate(x,mF3),4,length(x))))
(mF4 <- superSample(x=mesh(sort(c(-1,2,sample(seq(0,1,0.005),20)))),mF3))
matlines(x,t(matrix(evaluate(x,mF3),4,length(x))))
summary(evaluate(x,mF3)-evaluate(x,mF4))
mF3@mesh
mF4@mesh
plot(mF4@mesh)
# speed
system.time(for (i in 1:1000) res <- evaluate(seq(0,1,0.01),mF3))
system.time(for (i in 1:1000) res <- superSample(seq(0,1,0.01),mF3))
# matFct: sum
x <- seq(-0.5,1.5,0.01)
matplot(x,t(matrix(evaluate(x,mF2+mF4[1,1:2]),2,length(x))))
matlines(x,t(matrix(evaluate(x,mF2),2,length(x))))
matlines(x,t(matrix(evaluate(x,mF4)[1,,],2,length(x))))
(mF2+mF4[1,1:2])@mesh
summary(evaluate(x,mF2)+evaluate(x,mF4)[1,,,drop=FALSE]-evaluate(x,mF2+mF4[1,1:2]))
# matFct: product
x <- seq(-0.1,1.1,0.01)
matplot(x,t(matrix(evaluate(x,mF2*mF4),2,length(x))))
matlines(x,t(matrix(evaluate(x,mF2),2,length(x))))
matlines(x,t(matrix(evaluate(x,mF4),4,length(x))))
(mF2*mF4)@mesh
for (i in sort(sample(1:length(x),40))) {
cat("t=",x[i],":",evaluate(x,mF2)[,,i]%*%evaluate(x,mF4)[,,i]-evaluate(x,mF2*mF4)[,,i],"\n")
}
# speed
mF4 <- superSample(mF2@mesh,mF4)
mF2 <- superSample(mF4@mesh,mF2)
system.time(for (i in 1:1000) res1 <- mF2*mF4)
# matFct: forward
x <- seq(0,2,0.01)
mF <- matFct(mesh=mesh(c(0,1,2)),f=array(c(0,1,-2),dim=c(1,1,3)),g=array(rnorm(2),dim=c(1,1,2,1)),continuous=rep(FALSE,2))
plot(x,evaluate(x,mF))
plot(x,evaluate(x,forward(mF)))
plot(x,evaluate(x,forward(forward(mF))))
plot(x,evaluate(x,forward(forward(forward(mF)))))
# speed
system.time(for (i in 1:1000) res <- forward(mF4))
# matFct: forward
x <- seq(0,2,0.01)
mF <- matFct(mesh=mesh(c(0,1,2)),f=array(c(0,1,2),dim=c(1,1,3)),g=array(0,dim=c(1,1,2,0)),continuous=FALSE)
plot(x,evaluate(x,mF))
plot(x,evaluate(x,forward(mF)))
plot(x,evaluate(x,forward(forward(mF))))
plot(x,evaluate(x,forward(forward(forward(mF)))))
# speed
system.time(for (i in 1:1000) res <- backward(mF4))
# matFct: backward
x <- seq(0,1,0.01)
mF <- matFct(mesh=mesh(c(0,0.5,1)),f=array(c(0,0.5,1),dim=c(1,1,3)),g=array(0,dim=c(1,1,2,0)),continuous=rep(FALSE,2))
plot(x,evaluate(x,mF))
plot(x,evaluate(x,backward(mF)))
plot(x,evaluate(x,backward(backward(mF))))
plot(x,evaluate(x,backward(backward(backward(mF)))))
# speed
system.time(for (i in 1:1000) res <- backward(mF4))
# matFct: triangular
mF <- matFct(mesh=mesh(c(0,1)),f=array(c(1,1),dim=c(1,1,2)),g=array(0,dim=c(1,1,1,0)),continuous=FALSE)
x <- seq(0,1,0.01)
triangular(superSample(seq(0,1,0.5),mF))
# matFct: concatenation
mF <- matFct(mesh=mesh(c(0,1)),f=array(c(1,1),dim=c(1,1,2)),g=array(1,dim=c(1,1,1,1)),continuous=FALSE)
mF@f
forward(mF)@f
(forward(mF)|mF)@f
mF@g
forward(mF)@g
(forward(mF)|mF)@g
# speed
system.time(for (i in 1:1000) res <- mF4|mF4)
# --------------------------
# Approximation of sample
# --------------------------
tmp <- apply(0.01*array(rnorm(4*101),dim=c(101,2,2)),c(2,3),cumsum)
plot(approximate(seq(0,1,0.01),tmp,seq(1,101,10),order=0))
plot(approximate(seq(0,1,0.01),tmp,seq(1,101,10),order=1))
plot(approximate(seq(0,1,0.01),tmp,seq(1,101,10),order=2))
mF1 <- approximate(seq(0,1,0.01),tmp,seq(1,101,10),order=2)
mF2 <- approximate(c(0,0.5,1),array(rnorm(12),dim=c(3,2,2)),order=0)
plot(mF2)
?approximate
?operatorMLE
operatorMLE
?operator
n <- 100
p <- 10
N <- 2
matData <- aperm(apply(array(rnorm(n*p*N)/sqrt(p),dim=c(n,p,N)),c(1,3),cumsum),c(2,1,3))+
rnorm(n*p*N)*1
matplot(t(matData[,,1]),type="l")
matplot(t(matData[,,1]),type="l")
components <- 2
# take dimensions
n <- dim(matData)[1]
p <- dim(matData)[2]
N <- dim(matData)[3]
# embed data
X <- approximate(seq(0,1,length.out=p),aperm(matData,c(2,3,1)))
#plot(transpose(tilde.X))
# remove mean structure and make singular value decomposition
my.svd <- svd(matrix(matData-rep(apply(matData,c(2,3),mean),each=n),n,p*N),0,components)
my.data <- array(my.svd$v%*%diag(my.svd$d[1:components],rep(components,2)),
dim=c(p,N,components))
delta1 <- approximate(seq(0,1,length.out=p),my.data*sqrt(p/n))
alpha1 <- approximate(seq(0,1,length.out=p),
aperm(array(apply(matData,2,cov),dim=c(N,N,p)),c(3,1,2))
)-(1/p)*delta1*transpose(delta1)
epsilon1 <- delta1
alpha2 <- inverse(alpha1)
delta2 <- -inverse(alpha1,delta1)*solve(diag(dim(delta1@f)[2])+integral(transpose(epsilon1)*inverse(alpha1,delta1)))
epsilon2 <- inverse(transpose(alpha1),epsilon1)
delta12   <- alpha1*delta2 + epsilon1*forward(transpose(delta1)*delta2) -
delta1*forward(transpose(epsilon1)*delta2)
epsilon12 <- transpose(alpha2)*epsilon1 + delta2*backward(transpose(epsilon2)*epsilon1) +
epsilon2*forward(transpose(delta2)*epsilon1)
#####################################
plot(alpha1)
plot(delta1)
plot(delta1*transpose(epsilon1))
plot(delta1*transpose(epsilon12)+delta12*transpose(epsilon2))
# true values
#alpha <- approximate(seq(0,1,length.out=p),aperm(array(c(1,0,0,1),dim=c(N,N,p)),c(3,1,2)))
#epsilon <- approximate(seq(0,1,length.out=p),aperm(array(c(1,0,0,1),dim=c(N,N,p)),c(3,1,2)))
#delta   <- approximate(seq(0,1,length.out=p),array(c(seq(0,1,length.out=p),seq(0,0,length.out=p),
#                                                     seq(0,0,length.out=p),seq(0,1,length.out=p)),dim=c(p,N,N)))
#summary(t(apply(evaluate(seq(0,1,0.01),alpha),3,function(x) eigen(x)$values)))
neg.gradient <- function(x) {
# assume variables: n, X, S, h (list with elements alpha, delta, epsilon)
tmpS <- S
if (x!=0) {
tmpS@alpha@f   <- S@alpha@f+x*h$alpha
tmpS@delta@f   <- S@delta@f+x*h$delta
tmpS@epsilon@f <- S@epsilon@f+x*h$epsilon
}
invS <- inverse(tmpS)
return(list(alpha=0*triangular(p*invS@alpha+(1/2)*(invS@delta*transpose(invS@epsilon)+invS@epsilon*transpose(invS@delta))-(p/n)*X*transpose(X)),
delta=triangular(invS@alpha*tmpS@epsilon+2*invS@delta*backward(transpose(invS@epsilon)*tmpS@epsilon)-(2*p/n)*X*backward(transpose(X)*tmpS@epsilon)),
epsilon=triangular(invS@alpha*tmpS@delta+2*invS@epsilon*forward(transpose(invS@delta)*tmpS@delta)-(2*p/n)*X*forward(transpose(X)*tmpS@delta))
))
}
S <- inverse(as.operator(symmOperator(alpha=alpha,delta=(sqrt(p))*delta,epsilon=(sqrt(p))*epsilon)))
S <- inverse(as.operator(symmOperator(alpha=alpha1,delta=(sqrt(p))*delta,epsilon=(sqrt(p))*epsilon)))
S <- inverse(as.operator(symmOperator(alpha=alpha1,delta=(sqrt(p))*delta1,epsilon=(sqrt(p))*epsilon1)))
install.packages("deSolve")
S <- inverse(as.operator(symmOperator(alpha=alpha1,delta=(sqrt(p))*delta1,epsilon=(sqrt(p))*epsilon1)))
lambda.start <- 1/(3*N*p*components)
lambda.max <- 1e-4
maxIter <- 100
alphaConv <- matrix(0,maxIter,5)
deltaConv <- matrix(0,maxIter,5)
epsilonConv <- matrix(0,maxIter,5)
g <- neg.gradient(0)
h <- g
#lambda <- lambda.start
for (iter in 1:maxIter) {
lambda <- lambda.max
#    for (up.steps in 0:2) {
#      g.new <- neg.gradient(lambda)
#      if (sum(g.new$alpha*h$alpha) +
#          sum(g.new$delta*h$delta) +
#          sum(g.new$epsilon*h$epsilon) < 0) break
#      lambda <- lambda*step.factor
#    }
for (down.steps in 0:9) {
#      lambda <- lambda*(step.factor+1)/(2*step.factor)
g.new <- neg.gradient(lambda)
if (sum(g.new$alpha*h$alpha) +
sum(g.new$delta*h$delta) +
sum(g.new$epsilon*h$epsilon) >= 0) break
lambda <- lambda/step.factor
}
# update coefficients
S@alpha@f   <- S@alpha@f   + lambda*h$alpha
S@delta@f   <- S@delta@f   + lambda*h$delta
S@epsilon@f <- S@epsilon@f + lambda*h$epsilon
# conjugate gradients
gamma <- (sum((g.new$alpha-g$alpha)*g.new$alpha) +
sum((g.new$delta-g$delta)*g.new$delta) +
sum((g.new$epsilon-g$epsilon)*g.new$epsilon)) /
(sum(g$alpha*g$alpha)+sum(g$delta*g$delta)+sum(g$epsilon*g$epsilon))
gamma <- min(gamma.max,max(gamma.min,gamma))
h$alpha   <- g.new$alpha   + gamma*h$alpha
h$delta   <- g.new$delta   + gamma*h$delta
h$epsilon <- g.new$epsilon + gamma*h$epsilon
g <- g.new
# stepest descent
#    h <- g.new
# delta and epsilon of same size: rescale
#delta.vs.epsilon <- sqrt(sqrt(sum(S@delta@f^2)/sum(S@epsilon@f^2)))
#    delta.vs.epsilon <- sqrt(sqrt(sum(g$delta^2)/sum(g$epsilon^2)))
#    S@delta@f   <- S@delta@f   / delta.vs.epsilon
#    S@epsilon@f <- S@epsilon@f * delta.vs.epsilon
#    h$delta     <- h$delta     / delta.vs.epsilon
#    h$epsilon   <- h$epsilon   * delta.vs.epsilon
#    g$delta     <- g$delta     / delta.vs.epsilon
#    g$epsilon   <- g$epsilon   * delta.vs.epsilon
#    invS <- inverse(S)
#    dAlpha <- triangular(-n*1*invS@alpha-n/2*(invS@delta*transpose(invS@epsilon)+invS@epsilon*transpose(invS@delta))+1*X*transpose(X))
#    dDelta <- triangular(-n*invS@alpha*S@epsilon-2*n*invS@delta*backward(transpose(invS@epsilon)*S@epsilon)+2*1*X*backward(transpose(X)*S@epsilon))
#    dEpsilon <- triangular(-n*invS@alpha*S@delta-2*n*invS@epsilon*forward(transpose(invS@delta)*S@delta)+2*1*X*forward(transpose(X)*S@delta))
# diagnostics
if (verbose) {
cat("iteration",iter,": steps down=",down.steps,": lambda=",lambda,", conjugate gamma=",gamma,"\n")
delta.vs.epsilon <- sqrt(sqrt(sum(g$delta^2)/sum(g$epsilon^2)))
tmp <- rbind(quantile(g$alpha),quantile(h$alpha),
quantile(g$delta / delta.vs.epsilon),quantile(h$delta / delta.vs.epsilon),
quantile(g$epsilon * delta.vs.epsilon),quantile(h$epsilon * delta.vs.epsilon))
rownames(tmp) <- c("g.alpha","h.alpha","g.delta","h.delta","g.epsilon","h.epsilon")
if (gamma!=0) print(tmp) else print(tmp[c(1,3,5),])
alphaConv[iter,] <- quantile(g$alpha)
deltaConv[iter,] <- quantile(g$delta / delta.vs.epsilon)
epsilonConv[iter,] <- quantile(g$epsilon * delta.vs.epsilon)
}
}
lambda.max=0.1
step.factor=3/2
gamma.min=0
gamma.max=0.1
verbose=TRUE
g <- neg.gradient(0)
h <- g
#lambda <- lambda.start
for (iter in 1:maxIter) {
lambda <- lambda.max
#    for (up.steps in 0:2) {
#      g.new <- neg.gradient(lambda)
#      if (sum(g.new$alpha*h$alpha) +
#          sum(g.new$delta*h$delta) +
#          sum(g.new$epsilon*h$epsilon) < 0) break
#      lambda <- lambda*step.factor
#    }
for (down.steps in 0:9) {
#      lambda <- lambda*(step.factor+1)/(2*step.factor)
g.new <- neg.gradient(lambda)
if (sum(g.new$alpha*h$alpha) +
sum(g.new$delta*h$delta) +
sum(g.new$epsilon*h$epsilon) >= 0) break
lambda <- lambda/step.factor
}
# update coefficients
S@alpha@f   <- S@alpha@f   + lambda*h$alpha
S@delta@f   <- S@delta@f   + lambda*h$delta
S@epsilon@f <- S@epsilon@f + lambda*h$epsilon
# conjugate gradients
gamma <- (sum((g.new$alpha-g$alpha)*g.new$alpha) +
sum((g.new$delta-g$delta)*g.new$delta) +
sum((g.new$epsilon-g$epsilon)*g.new$epsilon)) /
(sum(g$alpha*g$alpha)+sum(g$delta*g$delta)+sum(g$epsilon*g$epsilon))
gamma <- min(gamma.max,max(gamma.min,gamma))
h$alpha   <- g.new$alpha   + gamma*h$alpha
h$delta   <- g.new$delta   + gamma*h$delta
h$epsilon <- g.new$epsilon + gamma*h$epsilon
g <- g.new
# stepest descent
#    h <- g.new
# delta and epsilon of same size: rescale
#delta.vs.epsilon <- sqrt(sqrt(sum(S@delta@f^2)/sum(S@epsilon@f^2)))
#    delta.vs.epsilon <- sqrt(sqrt(sum(g$delta^2)/sum(g$epsilon^2)))
#    S@delta@f   <- S@delta@f   / delta.vs.epsilon
#    S@epsilon@f <- S@epsilon@f * delta.vs.epsilon
#    h$delta     <- h$delta     / delta.vs.epsilon
#    h$epsilon   <- h$epsilon   * delta.vs.epsilon
#    g$delta     <- g$delta     / delta.vs.epsilon
#    g$epsilon   <- g$epsilon   * delta.vs.epsilon
#    invS <- inverse(S)
#    dAlpha <- triangular(-n*1*invS@alpha-n/2*(invS@delta*transpose(invS@epsilon)+invS@epsilon*transpose(invS@delta))+1*X*transpose(X))
#    dDelta <- triangular(-n*invS@alpha*S@epsilon-2*n*invS@delta*backward(transpose(invS@epsilon)*S@epsilon)+2*1*X*backward(transpose(X)*S@epsilon))
#    dEpsilon <- triangular(-n*invS@alpha*S@delta-2*n*invS@epsilon*forward(transpose(invS@delta)*S@delta)+2*1*X*forward(transpose(X)*S@delta))
# diagnostics
if (verbose) {
cat("iteration",iter,": steps down=",down.steps,": lambda=",lambda,", conjugate gamma=",gamma,"\n")
delta.vs.epsilon <- sqrt(sqrt(sum(g$delta^2)/sum(g$epsilon^2)))
tmp <- rbind(quantile(g$alpha),quantile(h$alpha),
quantile(g$delta / delta.vs.epsilon),quantile(h$delta / delta.vs.epsilon),
quantile(g$epsilon * delta.vs.epsilon),quantile(h$epsilon * delta.vs.epsilon))
rownames(tmp) <- c("g.alpha","h.alpha","g.delta","h.delta","g.epsilon","h.epsilon")
if (gamma!=0) print(tmp) else print(tmp[c(1,3,5),])
alphaConv[iter,] <- quantile(g$alpha)
deltaConv[iter,] <- quantile(g$delta / delta.vs.epsilon)
epsilonConv[iter,] <- quantile(g$epsilon * delta.vs.epsilon)
}
}
# convergence diagnostics
if (verbose) {
par(mfrow=c(1,1))
matplot(alphaConv[,],type="b",xlab="iteration",ylab="5-point statistics of gradient",main="convergence statistics for alpha")
matplot(deltaConv[,],type="b",xlab="iteration",ylab="5-point statistics of gradient",main="convergence statistics for delta")
matplot(epsilonConv[,],type="b",xlab="iteration",ylab="5-point statistics of gradient",main="convergence statistics for epsilon")
}
# diagnostics
invS <- inverse(S)
plot(invS@alpha); title("inverse: alpha")
plot(invS@delta*transpose(invS@epsilon)); title("inverse: delta*transpose(epsilon)")
plot(approximate(seq(0,1,length.out=p),aperm(g$alpha,c(3,1,2)))); title("dAlpha")
plot(approximate(seq(0,1,length.out=p),aperm(g$delta,c(3,1,2)))); title("dDelta")
plot(approximate(seq(0,1,length.out=p),aperm(g$epsilon,c(3,1,2)))); title("dEpsilon")
# image
im <- matrix(0,p,p)
for (x in 1:p) for (y in 1:p) {
im[x,y] <- (1/p)*(evaluate(max(x,y)/p,invS@epsilon)[,,1] %*% evaluate(min(x,y)/p,transpose(invS@delta))[,,1])[1,1]-
cov(matData[,x,1],matData[,y,1])+(x==y)
}
im.start <- matrix(0,p,p)
for (x in 1:p) for (y in 1:p) {
im.start[x,y] <- (evaluate(x/p,delta)[,,1] %*% evaluate(y/p,transpose(delta))[,,1])[1,1]-
cov(matData[,x,1],matData[,y,1])+(x==y)
}
library(operatorCalc)
matrix(c(1,2,0,1),2,2)
solve(matrix(c(1,2,0,1),2,2))
install.packages("RcppArmadillo")
library(operatorCalc)
random.function <- function(a,b,p,r,N,M) {
pp <- 2*(r+1)*p
approximate(seq(a,b,length.out=pp+1),
array(apply(array(rnorm((pp+1)*N*M)/sqrt(pp),dim=c(pp+1,N,M)),2:3,cumsum),dim=c(pp+1,N,M)),
seq(1,pp+1,2*(r+1)),
r,TRUE)}
random.operator <- function(a,b,p,r,N,T.order,P.order) {
tmp <- random.function(a,b,p,r,N,N)
tmp <- tmp*transpose(tmp)
tmp@f <- tmp@f + 10*c(diag(N))
operator(alpha=tmp,
beta=random.function(a,b,p,r,N,T.order),
gamma=random.function(a,b,p,r,N,T.order),
delta=random.function(a,b,p,r,N,P.order),
epsilon=random.function(a,b,p,r,N,P.order))}
a <- -1
b <- 2
p <- 20
r <- 2
N <- 2
fct <- random.function(a,b,p,r,N,3)
op1 <- random.operator(a,b,p,r,N,2,1)
op2 <- random.operator(a,b,p,r,N,2,3)
plot(op1*op2*fct)
x <- seq(0,1,0.01)
summary(evaluate(x,(op1*op2)*fct)-evaluate(x,op1*(op2*fct)))
summary(evaluate(x,(op1+op2)*fct)-evaluate(x,op1*fct+op2*fct))
# Operator inversion: Not yet sufficiently stable
system.time(tmp <- op1*inverse(op1))
install.packages("deSolve")
system.time(tmp <- op1*inverse(op1))
plot(tmp@alpha)
plot(tmp@beta*transpose(tmp@gamma))
plot(tmp@delta*transpose(tmp@epsilon))
summary(evaluate(x,tmp*fct)-evaluate(x,fct))
op1
approximate(c(0,1),c(0,1))
?approximate
approximate(c(0,1),array(c(0,1),dim=c(2,1,1))
)
approximate(c(0,1),array(c(0,1),dim=c(2,1,1)))
plot(approximate(c(0,1),array(c(0,1),dim=c(2,1,1))))
alphaFct <- approximate(c(0,1),array(c(0.01,0.01),dim=c(2,1,1))
)
alphaFct <- approximate(c(0,1),array(c(1,1),dim=c(2,1,1)))
detlaFct <- approximate(c(0,1),array(c(1,1),dim=c(2,1,1)))
detlaFct <- approximate(c(0,1),array(c(1,1),dim=c(2,1,1)))
deltaFct <- approximate(c(0,1),array(c(1,1),dim=c(2,1,1)))
epsilonFct <- approximate(c(0,1),array(c(1,1),dim=c(2,1,1)))
deltaFct <- approximate(c(0,1),array(c(0,1),dim=c(2,1,1)))
betaFct <- epsilonFct | -deltaFct
gammabetaFct <- epsilonFct | -deltaFct
gammaFct <- deltaFct | epsilonFct
myopt <- operator(alphaFct,betaFct,gammaFct,deltaFct,epsilonFct)
alphaFct
betaFct
gammaFct
deltaFct
epsilonFct
myopt <- operator(alpha=alphaFct,beta=betaFct,gamma=gammaFct,delta=deltaFct,epsilon=epsilonFct)
myopt
plot(myopt)
invopt <- inverse(myopt)
invopt
invopt@alpha
plot(invopt@alpha)
plot(invopt@delta)
plot(invopt@epsilon)
plot(invopt@delta)
x <- seq(0,1,length.out=101)
lines(x,exp(x)+exp(-x),col=2)
lines(x,-exp(x)-exp(-x),col=2)
plot(x,exp(x)+exp(-x),col=2)
plot(x,exp(x)-exp(-x),col=2)
plot(x,-exp(x)+exp(-x),col=2)
lines(x,-exp(x)+exp(-x),col=2)
lines(x,0.5*(-exp(x)+exp(-x)),col=2)
invopt*myopt
tmp <- invopt*myopt
plot(tmp@alpha)
plot(tmp@beta)
plot(tmp@beta*transpose(tmp@gamma))
plot(tmp@delta*transpose(tmp@epsilon))
?"inverse,operator-method"
myfct <- random.function(0,1,p,1,1,1)
plot(myfct)
plot(invopt*myopt*myfct)
evaluate(x,invopt*myopt*myfct)
c(evaluate(x,invopt*myopt*myfct))
c(evaluate(x,invopt*myopt*myfct)-evaluate(x,myfct))
summary(c(evaluate(x,invopt*myopt*myfct)-evaluate(x,myfct)))
op1 <- invopt*myopt
plot(op1@beta)
plot(op1@beta*transpose(op1@gamma))
library(isdals)
data(fev)
names(fev)
